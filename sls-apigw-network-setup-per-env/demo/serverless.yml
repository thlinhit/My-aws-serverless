service: ${self:custom.servicePrefix}-demo
frameworkVersion: "3"
configValidationMode: warn

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  servicePrefix: thlinh
  # No plugins needed
plugins: []

provider:
  runtime: python3.12
  stage: local
  region: ap-southeast-1
  versionFunctions: false
  name: aws
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: "*"

functions:
  transactionApi:
    handler: src/empty.handler

resources:
  Parameters:
    RestApiId:
      Type: String
      Default: ${param:restApiId}
    EnablePrivateLink:
      Type: String
      AllowedValues: ["true", "false"]
      Default: ${param:enablePrivateLink}
    RestApiRootResourceId:
      Type: String
      Default: ${param:restApiRootResourceId}
    VpcLinkId:
      Type: String
      Default: ${param:vpcLinkId}
    NlbDnsName:
      Type: String
      Default: ${param:nlbDnsName}
  Conditions:
    PrivateLink: !Equals [!Ref EnablePrivateLink, "true"]
    NotPrivateLink: !Not [!Condition PrivateLink]
  Resources:
    GWTransactionResource:
      Type: AWS::ApiGateway::Resource
      Properties:
        RestApiId: !Ref RestApiId
        ParentId: !Ref RestApiRootResourceId
        PathPart: transaction

    GWTransactionMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        RestApiId: !Ref RestApiId
        ResourceId: !Ref GWTransactionResource
        HttpMethod: POST
        AuthorizationType: NONE
        Integration:
          Fn::If:
            - PrivateLink
            - # PrivateLink integration block
              Type: HTTP_PROXY
              IntegrationHttpMethod: POST
              Uri: !Sub "http://${NlbDnsName}/transaction"
              ConnectionType: VPC_LINK
              ConnectionId: !Ref VpcLinkId
            - # Lambda Proxy integration block
              Type: AWS_PROXY
              IntegrationHttpMethod: POST
              Uri: !Sub
                - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
                - { LambdaArn: !GetAtt TransactionApiLambdaFunction.Arn }

    GWDeploymentPrivate:
      Type: AWS::ApiGateway::Deployment
      DependsOn: GWTransactionMethod
      Properties:
        RestApiId: !Ref RestApiId
        StageName: ${opt:stage, self:provider.stage}

    LambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Condition: NotPrivateLink
      DependsOn: GWTransactionMethod
      Properties:
        FunctionName: !GetAtt TransactionApiLambdaFunction.Arn
        Action: lambda:InvokeFunction
        Principal: apigateway.amazonaws.com
        SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApiId}/*/POST/transaction

package:
  patterns:
    - src/empty.python
