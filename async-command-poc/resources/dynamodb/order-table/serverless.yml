service: ${self:custom.servicePrefix}-dynamodb-resources
frameworkVersion: '4'

custom:
  stage: ${opt:stage, self:provider.stage}
  servicePrefix: arb-poc
  orderTable: ${self:custom.servicePrefix}-order-table

provider:
  name: aws
  stage: local
  region: ${opt:region, 'eu-central-1'}

resources:
  Resources:
    orderTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.orderTable}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: pk
            AttributeType: S
          - AttributeName: sk
            AttributeType: S
        KeySchema:
          - AttributeName: pk
            KeyType: HASH
          - AttributeName: sk
            KeyType: RANGE
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES
        Tags:
          - Key: Team
            Value: 9999

    orderTableArnSSMParameter:
      Type: AWS::SSM::Parameter
      Properties:
        Name: /arb/poc/${self:custom.stage}/order/table/arn
        Type: String
        Value: !GetAtt orderTable.Arn
        Tags:
          Environment: ${self:custom.stage}
          Team: "9999"
    
    OrderPlacedPipe:
      Type: AWS::Pipes::Pipe
      Properties:
        Name: order-table-order-placed-event-pipe
        RoleArn: !GetAtt PipeExecutionRole.Arn
        Source: !GetAtt orderTable.StreamArn
        Target: ${ssm:/arb/poc/${self:custom.stage}/eventbus/arn}
        TargetParameters:
          EventBridgeEventBusParameters:
            DetailType: "OrderPlaced"
            Source: "com.poc.arb.ecommerce.order"
          InputTemplate: |
            {
              "version": 1,
              "id": "<$.eventID>",
              "type": "OrderPlaced",
              "time": "<$.dynamodb.NewImage.createdAt.S>",
              "source": "com.poc.arb.ecommerce.order",
              "detail": {
                "orderId": "<$.dynamodb.NewImage.sk.S>",
                "userId": "<$.dynamodb.NewImage.userId.S>",
                "status": "<$.dynamodb.NewImage.status.S>",
                "deliveryPrice": "<$.dynamodb.NewImage.deliveryPrice.N>",
                "createdAt": "<$.dynamodb.NewImage.createdAt.S>",
                "updatedAt": "<$.dynamodb.NewImage.updatedAt.S>",
                "updatedBy": "<$.dynamodb.NewImage.updatedBy.S>"
              }
            }
        SourceParameters:
          DynamoDBStreamParameters:
            StartingPosition: LATEST
          FilterCriteria:
            Filters:
              - Pattern: '{"eventName": ["INSERT"], "dynamodb": { "NewImage": { "pk": { "S": [{ "prefix": "ORDER#" }] }, "sk": { "S": [{ "prefix": "ORDER#" }] } } }}'
        Tags:
          Environment: ${self:custom.stage}
          Team: "9999"

    PipeExecutionRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: pipes.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: AllowDynamoDBStreamToEventBridge
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:DescribeStream
                    - dynamodb:GetRecords
                    - dynamodb:GetShardIterator
                    - dynamodb:ListStreams
                  Resource: !GetAtt orderTable.StreamArn
                - Effect: Allow
                  Action:
                    - events:PutEvents
                  Resource: ${ssm:/arb/poc/${self:custom.stage}/eventbus/arn}
        Tags:
          - Key: Team
            Value: 9999

  Outputs:
    orderTableName:
      Value: ${self:custom.orderTable}
    orderTableArn:
      Value: !GetAtt orderTable.Arn
    orderTableStreamArn:
      Value: !GetAtt orderTable.StreamArn