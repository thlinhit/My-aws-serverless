service: ${self:custom.servicePrefix}-vpc-x
frameworkVersion: '3'

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  servicePrefix: thlinh

provider:
  stage: local
  region: us-east-1
  name: aws

#############
# RESOURCES #
#############
resources:
  Parameters:
    VpcName:
      Type: String
      Default: VPC-X
  Mappings:
    SubnetConfig:
      VPC:
        CIDR: '10.220.64.0/18'
      PublicOne:
        CIDR: '10.220.112.0/22'
      PublicTwo:
        CIDR: '10.220.116.0/22'
      PublicThree:
        CIDR: '10.220.120.0/22'
      PrivateOne:
        CIDR: '10.220.64.0/21'
      PrivateTwo:
        CIDR: '10.220.72.0/21'
      PrivateThree:
        CIDR: '10.220.80.0/21'
  Resources:
    MyVpc:
      Type: AWS::EC2::VPC
      Properties:
        EnableDnsSupport: true
        EnableDnsHostnames: true
        CidrBlock: !FindInMap [ 'SubnetConfig', 'VPC', 'CIDR' ]
        Tags:
          - Key: Name
            Value: !Ref VpcName
    PublicSubnetOne:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        VpcId: !Ref MyVpc
        CidrBlock: !FindInMap [ 'SubnetConfig', 'PublicOne', 'CIDR' ]
        MapPublicIpOnLaunch: true
    PublicSubnetTwo:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        VpcId: !Ref MyVpc
        CidrBlock: !FindInMap [ 'SubnetConfig', 'PublicTwo', 'CIDR' ]
        MapPublicIpOnLaunch: true
    PublicSubnetThree:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
        VpcId: !Ref MyVpc
        CidrBlock: !FindInMap [ 'SubnetConfig', 'PublicThree', 'CIDR' ]
        MapPublicIpOnLaunch: true

    # Three private subnets where containers will only have private
    # IP addresses, and will only be reachable by other members of the
    # VPC and API Gateway
    PrivateSubnetOne:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select
          - 0
          - Fn::GetAZs: !Ref 'AWS::Region'
        VpcId: !Ref MyVpc
        CidrBlock: !FindInMap [ 'SubnetConfig', 'PrivateOne', 'CIDR' ]
    PrivateSubnetTwo:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select
          - 1
          - Fn::GetAZs: !Ref 'AWS::Region'
        VpcId: !Ref MyVpc
        CidrBlock: !FindInMap [ 'SubnetConfig', 'PrivateTwo', 'CIDR' ]
    PrivateSubnetThree:
      Type: AWS::EC2::Subnet
      Properties:
        AvailabilityZone: !Select
          - 2
          - Fn::GetAZs: !Ref 'AWS::Region'
        VpcId: !Ref MyVpc
        CidrBlock: !FindInMap [ 'SubnetConfig', 'PrivateThree', 'CIDR' ]

    # Setup networking resources for the public subnets.
    InternetGateway:
      Type: AWS::EC2::InternetGateway
    GatewayAttachment:
      Type: AWS::EC2::VPCGatewayAttachment
      Properties:
        VpcId: !Ref MyVpc
        InternetGatewayId: !Ref InternetGateway
    PublicRouteTable:
      Type: AWS::EC2::RouteTable
      Properties:
        VpcId: !Ref MyVpc
    PublicRoute:
      Type: AWS::EC2::Route
      DependsOn: GatewayAttachment
      Properties:
        RouteTableId: !Ref 'PublicRouteTable'
        DestinationCidrBlock: '0.0.0.0/0'
        GatewayId: !Ref InternetGateway
    PublicSubnetOneRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetOne
        RouteTableId: !Ref PublicRouteTable
    PublicSubnetTwoRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetTwo
        RouteTableId: !Ref PublicRouteTable
    PublicSubnetThreeRouteTableAssociation:
      Type: AWS::EC2::SubnetRouteTableAssociation
      Properties:
        SubnetId: !Ref PublicSubnetThree
        RouteTableId: !Ref PublicRouteTable

    # Security Groups
    ManagedSgTxToolingBaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Infrastructure base
        GroupName: managed-sg-tx-tooling-base-x
        VpcId: !Ref MyVpc
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
            Description: Allow HTTPS outbound

    ManagedSgTxInfrastructureBaseSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Security group for Infrastructure base
        GroupName: managed-sg-tx-infrastructure-base-x
        VpcId: !Ref MyVpc
        SecurityGroupIngress:
          - CidrIp: !FindInMap [ 'SubnetConfig', 'VPC', 'CIDR' ]
            IpProtocol: -1 # Allow all protocols
            FromPort: -1  # Allow all ports
            ToPort: -1
            Description: Allow Self VPC inbound
        SecurityGroupEgress:
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
            Description: Allow HTTPS outbound
          - CidrIp: !FindInMap [ 'SubnetConfig', 'VPC', 'CIDR' ]
            IpProtocol: -1 # Allow all protocols
            FromPort: -1  # Allow all ports
            ToPort: -1
            Description: Allow all traffice outbound internal
          - IpProtocol: tcp
            FromPort: 80
            ToPort: 80
            CidrIp: 0.0.0.0/0
            Description: Allow HTTP outbound
          - IpProtocol: tcp
            FromPort: 53
            ToPort: 53
            CidrIp: 0.0.0.0/0
            Description: Allow DNS traffic
          - IpProtocol: udp
            FromPort: 53
            ToPort: 53
            CidrIp: 0.0.0.0/0
            Description: Allow DNS traffic
          - IpProtocol: udp
            FromPort: 123
            ToPort: 123
            CidrIp: 0.0.0.0/0
            Description: Allow NTP traffic

    ManagedSgTxInfrastructureBaseSelfIngress:
      Type: AWS::EC2::SecurityGroupIngress
      DependsOn: ManagedSgTxInfrastructureBaseSecurityGroup
      Properties:
        GroupId: !Ref ManagedSgTxInfrastructureBaseSecurityGroup
        SourceSecurityGroupId: !Ref ManagedSgTxInfrastructureBaseSecurityGroup
        IpProtocol: -1 # Allow all protocols
        FromPort: -1  # Allow all ports
        ToPort: -1
        Description: Allow self traffic

    # VPC Endpoints - API GW
    GWVPCEndpoint:
      Type: AWS::EC2::VPCEndpoint
      Properties:
        ServiceName: com.amazonaws.execute-api
        VpcId: !Ref MyVpc
        SubnetIds:
          - !Ref PrivateSubnetOne
          - !Ref PrivateSubnetTwo
          - !Ref PrivateSubnetThree
        SecurityGroupIds:
          - !Ref ManagedSgTxToolingBaseSecurityGroup
          - !Ref ManagedSgTxInfrastructureBaseSecurityGroup
          - !Ref ManagedSgTxInfrastructureBaseSelfIngress

  Outputs:
    vpcName:
      Value: !Ref VpcName
    vpcId:
      Value: !Ref MyVpc
    privateSubnetOneId:
      Value: !Ref PrivateSubnetOne
    privateSubnetTwoId:
      Value: !Ref PrivateSubnetTwo
    privateSubnetThreeId:
      Value: !Ref PrivateSubnetThree
    publicSubnetOneId:
      Value: !Ref PublicSubnetOne
    publicSubnetTwoId:
      Value: !Ref PublicSubnetTwo
    publicSubnetThreeId:
      Value: !Ref PublicSubnetThree
    managedSgTxToolingBaseSecurityGroup:
      Value: !Ref ManagedSgTxToolingBaseSecurityGroup
    infrastructureBaseSecurityGroupId:
      Value: !Ref ManagedSgTxInfrastructureBaseSecurityGroup