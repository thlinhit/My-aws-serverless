service: saas-gw-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: python3.11
  stage: ${opt:stage, 'dev'}
  region: us-east-1
  apiGateway:
    apiKeys:
      - name: tymebank-key
        value: ${ssm:/saas/apikey/tymebank}
      - name: sanlam-key
        value: ${ssm:/saas/apikey/sanlam}
      - name: abc-key
        value: ${ssm:/saas/apikey/abc}
    usagePlan:
      quota:
        limit: 5000
        period: MONTH
      throttle:
        burstLimit: 200
        rateLimit: 100
  logs:
    restApi:
      accessLogging: true
      executionLogging: true
      level: INFO
  environment:
    STAGE: ${self:provider.stage}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - ssm:GetParameter
            - ssm:PutParameter
          Resource: 
            - Fn::Join:
              - ":"
              - - "arn:aws:ssm"
                - Ref: "AWS::Region"
                - Ref: "AWS::AccountId"
                - "parameter/saas/apikey/*"
            # Add the path with leading slash
            - Fn::Join:
              - ":"
              - - "arn:aws:ssm"
                - Ref: "AWS::Region"
                - Ref: "AWS::AccountId"
                - "parameter//saas/apikey/*"

functions:
  # Lambda Authorizer function
  authorizer:
    handler: src/handlers/authorizer.handler
    description: Lambda authorizer that adds partnerId to the request context

  hello:
    handler: src/handlers/hello.handler
    events:
      - http:
          path: api/hello
          method: post
          private: true  # Requires API key
          cors: true
          authorizer: 
            name: authorizer
            resultTtlInSeconds: 0
            type: request
            identitySource: method.request.header.x-api-key

resources:
  Description: CloudFront distribution with API Gateway origin
  Resources:
    # CloudFront Function for path rewriting
    CloudFrontPathRewriteFunction:
      Type: AWS::CloudFront::Function
      Properties:
        Name: ${self:service}-${self:provider.stage}-path-rewrite
        AutoPublish: true
        FunctionConfig:
          Comment: "CloudFront Function to rewrite partner-specific paths to standard API paths"
          Runtime: cloudfront-js-1.0
        FunctionCode: |
          function handler(event) {
            var request = event.request;
            var uri = request.uri;
            
            // Make sure the URI is properly formatted with a leading slash if needed
            if (!uri.startsWith('/')) {
              uri = '/' + uri;
            }
            
            // Define a regular expression to match partner-specific paths
            // This will match patterns like /api/{partnerId}/hello
            var regex = /^\/api\/([^\/]+)\/hello(\/.*)?$/;
            var match = uri.match(regex);
            
            if (match) {
              // Capture the original URI for reference
              var originalUri = uri;
              
              // Extract the partner ID from the path
              var partnerId = match[1];
              
              // Rewrite to the generic path
              request.uri = '/api/hello';
              
              // Initialize headers object if it doesn't exist
              if (!request.headers) {
                request.headers = {};
              }
              
              // Add the original path as a header for reference - MUST use lowercase header names
              request.headers['x-original-path'] = {value: originalUri};
              
              // Add the partner ID as a custom header - MUST use lowercase header names
              request.headers['x-partner-id'] = {value: partnerId};
              
              // Log the rewrite (visible in CloudWatch Logs if logging is enabled)
              console.log('Path rewritten from ' + originalUri + ' to ' + request.uri);
              console.log('Extracted partner ID: ' + partnerId);
            }
            
            return request;
          }

    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: "CloudFront for API Gateway"
          Origins:
            - Id: ApiGatewayOrigin
              DomainName: 
                Fn::Join:
                  - ""
                  - - Ref: "ApiGatewayRestApi"
                    - ".execute-api.${self:provider.region}.amazonaws.com"
              OriginPath: "/${self:provider.stage}"
              CustomOriginConfig:
                HTTPPort: 80
                HTTPSPort: 443
                OriginProtocolPolicy: https-only
                OriginSSLProtocols:
                  - TLSv1.2

          # Default behavior for any unmatched paths
          DefaultCacheBehavior:
            AllowedMethods:
              - DELETE
              - GET
              - HEAD
              - OPTIONS
              - PATCH
              - POST
              - PUT
            CachedMethods:
              - GET
              - HEAD
              - OPTIONS
            TargetOriginId: ApiGatewayOrigin
            ForwardedValues:
              QueryString: true
              Headers:
                - x-api-key
                - Authorization
                - Content-Type
                - x-original-path
                - x-partner-id
              Cookies:
                Forward: none
            ViewerProtocolPolicy: redirect-to-https
            MinTTL: 0
            DefaultTTL: 0
            MaxTTL: 0
          # Partner-specific cache behaviors - using a wildcard to match all partner paths
          CacheBehaviors:
            - PathPattern: "api/*/hello*"
              TargetOriginId: ApiGatewayOrigin
              AllowedMethods:
                - DELETE
                - GET
                - HEAD
                - OPTIONS
                - PATCH
                - POST
                - PUT
              CachedMethods:
                - GET
                - HEAD
                - OPTIONS
              ForwardedValues:
                QueryString: true
                Headers:
                  - x-api-key
                  - Authorization
                  - Content-Type
                  - x-original-path
                  - x-partner-id
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              MinTTL: 0
              DefaultTTL: 0
              MaxTTL: 0
              FunctionAssociations:
                - EventType: viewer-request
                  FunctionARN: !GetAtt CloudFrontPathRewriteFunction.FunctionARN
          PriceClass: PriceClass_100
          ViewerCertificate:
            CloudFrontDefaultCertificate: true

  Outputs:
    CloudFrontDomainName:
      Value:
        Fn::GetAtt:
          - CloudFrontDistribution
          - DomainName
      Description: Domain name of CloudFront distribution
    CloudFrontFunctionARN:
      Value:
        Fn::GetAtt:
          - CloudFrontPathRewriteFunction
          - FunctionARN
      Description: ARN of the CloudFront path rewrite function
plugins:
  - serverless-python-requirements

package:
  individually: true
  patterns:
    - '!node_modules/**'
    - '!.gitignore'
    - '!.git/**'
    - '!.pytest_cache/**'
    - '!tests/**' 