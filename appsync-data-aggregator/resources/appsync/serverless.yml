service: aggregation-appsync-api

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  environment:
    DYNAMODB_TABLE: ${self:custom.dynamodbTableName}

plugins:
  - serverless-appsync-plugin
  - serverless-python-requirements
  - serverless-iam-roles-per-function
  
custom:
  dynamodbTableName: ${cf:aggregation-dynamodb-resources-${self:provider.stage}.AggregationTableName}
  dynamodbTableArn: ${cf:aggregation-dynamodb-resources-${self:provider.stage}.AggregationTableArn}
  serverless-iam-roles-per-function:
    defaultInherit: true
  pythonRequirements:
    slim: true
    layer:
      name: python-deps
      description: Python dependencies for Lambda functions
    noDeploy:
      - pytest
    pythonBin: python3
    removeExtraRequirements: true
    dockerizePip: true

# Lambda functions
functions:
  GetLoanApplicationStats:
    handler: functions/getLoanApplicationStats/index.handler
    runtime: python3.12
    memorySize: 256
    timeout: 30
    environment:
      DYNAMODB_TABLE: ${self:custom.dynamodbTableName}
      POWERTOOLS_SERVICE_NAME: loan-stats-service
      POWERTOOLS_LOGGER_LOG_EVENT: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - dynamodb:GetItem
        Resource:
          - ${self:custom.dynamodbTableArn}
          - !Join ["", ["${self:custom.dynamodbTableArn}", "/index/*"]]
    layers:
      - Ref: PythonRequirementsLambdaLayer
    package:
      individually: true
      patterns:
        - '!**'
        - 'functions/**'
        - '!functions/**/__pycache__/**'
        - '!functions/**/*.pyc'
        - '!functions/**/*.pyo'
        - '!functions/**/*.pyd'


appSync:
  name: AggregationAPI
  authentication:
    type: API_KEY
    apiKeys:
      - name: DefaultAPIKey
        description: Default API Key for GraphQL API
        expiresAfter: 30d
  logging:
    loggingRoleArn: !GetAtt AppSyncLoggingServiceRole.Arn
    level: ALL
  schema: schema.graphql
  
  # Define pipeline functions
  pipelineFunctions:
    getEarliestLoanApplicationFunction:
      dataSource: AggregationDynamoDBTable
      request: mapping-templates/getEarliestLoanApplication-request.vtl
      response: mapping-templates/getEarliestLoanApplication-response.vtl
      substitutions:
        table: ${self:custom.dynamodbTableName}
    
    getLoanApplicationCountWithinMonthsFunction:
      dataSource: AggregationDynamoDBTable
      request: mapping-templates/getLoanApplicationCountWithinMonths-request.vtl
      response: mapping-templates/getLoanApplicationCountWithinMonths-response.vtl
      substitutions:
        table: ${self:custom.dynamodbTableName}
    
    getLatestLoanApplicationByStatusFunction:
      dataSource: AggregationDynamoDBTable
      request: mapping-templates/getLatestLoanApplicationByStatus-request.vtl
      response: mapping-templates/getLatestLoanApplicationByStatus-response.vtl
      substitutions:
        table: ${self:custom.dynamodbTableName}
    
    getLoanApplicationStatsFunction:
      dataSource: LoanStatsLambdaDataSource
      request: mapping-templates/getLoanApplicationStats-request.vtl
      response: mapping-templates/getLoanApplicationStats-response.vtl

  resolvers:
    Query.getEarliestLoanApplication:
      kind: PIPELINE
      functions:
        - getEarliestLoanApplicationFunction
    
    Query.getLoanApplicationCountWithinMonths:
      kind: PIPELINE
      functions:
        - getLoanApplicationCountWithinMonthsFunction
    
    Query.getLatestLoanApplicationByStatus:
      kind: PIPELINE
      functions:
        - getLatestLoanApplicationByStatusFunction
    
    Query.getLoanApplicationStats:
      kind: PIPELINE
      functions:
        - getLoanApplicationStatsFunction

  dataSources:
    AggregationDynamoDBTable:
      type: AMAZON_DYNAMODB
      config:
        tableName: ${self:custom.dynamodbTableName}
        serviceRoleArn: !GetAtt AppSyncDynamoDBServiceRole.Arn
    
    LoanStatsLambdaDataSource:
      type: AWS_LAMBDA
      config:
        functionArn: !GetAtt GetLoanApplicationStatsLambdaFunction.Arn

resources:
  Resources:
    AppSyncLambdaInvokePermission:
      Type: AWS::Lambda::Permission
      Properties:
        Action: lambda:InvokeFunction
        FunctionName: !GetAtt GetLoanApplicationStatsLambdaFunction.Arn
        Principal: appsync.amazonaws.com
        SourceArn: !GetAtt GraphQlApi.Arn

    AppSyncDynamoDBServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        Policies:
          - PolicyName: DynamoDBAccess
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:GetItem
                    - dynamodb:PutItem
                    - dynamodb:DeleteItem
                    - dynamodb:UpdateItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:BatchGetItem
                    - dynamodb:BatchWriteItem
                    - dynamodb:ExecuteStatement
                    - dynamodb:PartiQLSelect
                  Resource:
                    - ${self:custom.dynamodbTableArn}
                    - !Join ["", ["${self:custom.dynamodbTableArn}", "/index/*"]]
    # Add CloudWatch logging role
    AppSyncLoggingServiceRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service: appsync.amazonaws.com
              Action: sts:AssumeRole
        ManagedPolicyArns:
          - arn:aws:iam::aws:policy/service-role/AWSAppSyncPushToCloudWatchLogs

  Outputs:
    GraphQLApiEndpoint:
      Value: !GetAtt GraphQlApi.GraphQLUrl
      Export:
        Name: ${self:service}-${self:provider.stage}-GraphQLApiEndpoint
    GraphQLApiId:
      Value: !GetAtt GraphQlApi.ApiId
      Export:
        Name: ${self:service}-${self:provider.stage}-GraphQLApiId 