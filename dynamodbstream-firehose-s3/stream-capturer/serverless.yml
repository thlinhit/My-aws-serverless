service: ${self:custom.servicePrefix}-functions
frameworkVersion: '3'

custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  servicePrefix: lend-test-test-capturer

  # plugin: serverless-python-requirements
  pythonRequirements:
    slim: true
    layer: true
    noDeploy:
      - pytest
  serverless-iam-roles-per-function:
    defaultInherit: true

provider:
  name: aws
  stage: local
  runtime: python3.9
  memorySize: 128
  region: us-east-1
  lambdaHashingVersion: 20201221
  environment:
    RUNNING_STAGE: ${self:custom.stage}
    EXTENSION_DEBUG: "false"
    TZ: "Asia/Ho_Chi_Minh"

#############
# FUNCTIONS #
#############
functions:
  tableStreamCaptureFn:
    name: ${self:custom.servicePrefix}-log-capture-fn
    handler: src/archive_fn/main.handler
    events:
      - stream:
          type: dynamodb
          startingPosition: LATEST
          batchSize: 10
          maximumBatchingWindow: 60
          enabled: true
          maximumConcurrency: 10
          functionResponseType: ReportBatchItemFailures
          arn: ${param:tableStreamArn}
          filterPatterns:
             - eventName: [INSERT, REMOVE, MODIFY]
    iamRoleStatementsName: ${self:custom.servicePrefix}-log-capture-fn-custom-lambdaRole
    iamRoleStatements:
      - Effect: Allow
        Action:
          - firehose:DescribeDeliveryStream
          - firehose:PutRecordBatch
        Resource:
          - !Sub arn:aws:firehose:${AWS::Region}:${AWS::AccountId}:deliverystream/${param:fireHoseDeliveryStreamName}
      - Effect: Allow
        Sid: AllowActionOnDLQ
        Action:
          - sqs:SendMessage
          - sqs:GetQueueUrl
        Resource:
          - !Sub arn:aws:sqs:${AWS::Region}:${AWS::AccountId}:${param:dlqName}
    layers:
      - Ref: PythonRequirementsLambdaLayer
    environment:
       POWERTOOLS_SERVICE_NAME:  ${self:custom.servicePrefix}-log-capture-fn
#       POWERTOOLS_LOGGER_LOG_EVENT: True
       LOG_LEVEL: DEBUG
       ACTIMIZE_591_ENABLE_STORE_LOGS_S3: "True"
       FIREHOSE_STREAM_NAME: ${param:fireHoseDeliveryStreamName}
       DQL_NAME: ${param:dlqName}
       DEFAULT_REGION: ${self:custom.region}
    architecture: arm64



###########
# PLUGINS #
###########
plugins:
  - serverless-python-requirements
  - serverless-cloudformation-sub-variables
  - serverless-iam-roles-per-function


#############
# RESOURCES #
#############
#resources:



package:
  individually: true
  patterns:
    - '!node_modules'
    - '!.serverless/requirements'
    - "!${opt:package, '.serverless'}"
    - '!configs'
    - '!*.yml*'
    - '!*.yaml*'
    - '!*.json'
    - '!*.sh'
    - 'lib'
    - '*.py'
    - '!requirements.txt'
  excludeDevDependencies: true